{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/board.js","webpack:///./lib/board_node.js","webpack:///./lib/edge.js","webpack:///./lib/maze.js","webpack:///./lib/maze_node.js","webpack:///./lib/maze_path.js","webpack:///./lib/node.js","webpack:///./lib/solvers.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAqC;AACX;AACS;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;;AAEA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAS;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6CAAI;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;ACxGrB;AAAA;AAA0B;;AAE1B,wBAAwB,6CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEe,wEAAS,EAAC;;;;;;;;;;;;;AC3BzB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;ACTpB;AAAA;AAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8CAAK;AACzB,CAAC;;;;;;;;;;;;;ACVD;AAAA;AAA0B;;AAE1B,uBAAuB,6CAAI;AAC3B;AACA;;AAEA,qBAAqB;AACrB;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;;AAEe,uEAAQ,EAAC;;;;;;;;;;;;;ACzBxB;AAAA;AAAA;AAAA;AAAmC;AACP;AACO;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,kDAAQ;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sCAAsC,kDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sCAAsC,kDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sCAAsC,kDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,kDAAQ;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,mDAAO;AACtC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,uEAAQ,EAAC;;;;;;;;;;;;;ACtIxB;AAAA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;ACPpB;AAAA;AAAA;AAAmC;AACA;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;;AAEA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qCAAqC;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;AAEe,sEAAO,EAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/maze.js\");\n","import BoardNode from \"./board_node\";\nimport Edge from \"./edge\";\nimport MazePath from \"./maze_path\";\n\nclass Board {\n  constructor(ctx, size) {\n    this.ctx = ctx;\n    this.size = size;\n    this.grid = this.generateGrid(this.size);\n    this.tree = this.primsGenerate();\n    new MazePath(this.tree, this.size, this.ctx);\n  }\n\n  generateGrid(size) {\n    let grid = new Array(size);\n    for (let row = 0; row < grid.length; row++) {\n      grid[row] = new Array(size);\n      for (let col = 0; col < grid[row].length; col++) {\n        let up = this.randomNum(1, 100);\n        let down = this.randomNum(1, 100);\n        let left = this.randomNum(1, 100);\n        let right = this.randomNum(1, 100);\n        if (row === 0) {\n          up = null;\n        }\n        if (row === grid.length - 1) {\n          down = null;\n        }\n        if (col === 0) {\n          left = null;\n        }\n        if (col === grid[row].length - 1) {\n          right = null;\n        }\n        grid[row][col] = new BoardNode(up, down, left, right, row, col);\n      }\n    }\n\n    return grid;\n  }\n\n  randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  randomIndex(max) {\n    return { row: this.randomNum(0, max), col: this.randomNum(0, max) };\n  }\n\n  findMinEdge(array) {\n    let minEdge = null;\n    for (let i = 0; i < array.length; i++) {\n      let edge = array[i];\n      let destination = this.destinationNode(edge);\n      if (\n        (minEdge === null || edge.cost < minEdge.cost) &&\n        !destination.visited\n      ) {\n        minEdge = edge;\n      }\n    }\n\n    return minEdge;\n  }\n\n  destinationNode(edge) {\n    let direction = edge.source[edge.direction];\n    let destinationRow = direction.row;\n    let destinationCol = direction.col;\n    return this.grid[destinationRow][destinationCol];\n  }\n\n  createEdges(sourceNode, costs) {\n    let output = [];\n    for (let destination in costs) {\n      let direction = costs[destination];\n      if (direction !== null) {\n        output.push(new Edge(sourceNode, direction, destination));\n      }\n    }\n    return output;\n  }\n\n  primsGenerate() {\n    let totalEdges = [];\n    let startingNode = this.grid[0][0];\n    let startingCosts = startingNode.neighborsCost;\n    let minimumTree = new Array();\n    startingNode.visited = true;\n    totalEdges.push(...this.createEdges(startingNode, startingCosts));\n\n    while (minimumTree.length < this.size * this.size - 1) {\n      let minEdge = this.findMinEdge(totalEdges);\n      let minNode = this.destinationNode(minEdge);\n      let minNodeCosts = minNode.neighborsCost;\n      minNode.visited = true;\n      minimumTree.push(minEdge);\n      totalEdges.push(...this.createEdges(minNode, minNodeCosts));\n    }\n\n    return minimumTree;\n  }\n}\n\nexport default Board;\n","import Node from \"./node\";\n\nclass BoardNode extends Node {\n  constructor(upCost, downCost, leftCost, rightCost, rowCoord, colCoord, ctx) {\n    super(rowCoord, colCoord, ctx);\n    this.visited = false;\n    this.neighborsCost = {\n      up: upCost,\n      down: downCost,\n      left: leftCost,\n      right: rightCost\n    };\n    this.up = this.neighborsCost.up\n      ? { row: this.coords.row - 1, col: this.coords.col }\n      : null;\n    this.down = this.neighborsCost.down\n      ? { row: this.coords.row + 1, col: this.coords.col }\n      : null;\n    this.left = this.neighborsCost.left\n      ? { row: this.coords.row, col: this.coords.col - 1 }\n      : null;\n    this.right = this.neighborsCost.right\n      ? { row: this.coords.row, col: this.coords.col + 1 }\n      : null;\n  }\n}\n\nexport default BoardNode;\n","class Edge {\n  constructor(source, cost, direction, ctx) {\n    (this.source = source),\n      (this.cost = cost),\n      (this.direction = direction),\n      (this.ctx = ctx);\n  }\n}\n\nexport default Edge;\n","import Board from \"./board\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  var canvas = document.getElementById(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  canvas.width = 510;\n  canvas.height = 510;\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  const board = new Board(ctx, 25);\n});\n","import Node from \"./node\";\n\nclass MazeNode extends Node {\n  constructor(rowCoord, colCoord, ctx) {\n    super(rowCoord, colCoord, ctx);\n\n    this.children = { up: null, down: null, left: null, right: null };\n  }\n\n  up() {\n    return { row: this.coords.row - 2, col: this.coords.col };\n  }\n\n  down() {\n    return { row: this.coords.row + 2, col: this.coords.col };\n  }\n\n  left() {\n    return { row: this.coords.row, col: this.coords.col - 2 };\n  }\n  right() {\n    return { row: this.coords.row, col: this.coords.col + 2 };\n  }\n}\n\nexport default MazeNode;\n","import MazeNode from \"./maze_node\";\nimport Board from \"./board\";\nimport Solvers from \"./solvers.js\";\n\nclass MazePath {\n  constructor(tree, size, ctx) {\n    this.size = size * 2 - 1;\n    this.tree = tree;\n    this.ctx = ctx;\n    this.grid = this.generateGrid(this.size);\n    this.path = this.generateMaze(this.tree, this.ctx);\n    this.startNode = null;\n    this.endNode = null;\n    this.currentSolver = null;\n  }\n\n  randomNum(min, max) {\n    let num = Math.floor(Math.random() * (max - min) + min);\n    if (num % 2 !== 0) {\n      return this.randomNum(min, max);\n    } else {\n      return num;\n    }\n  }\n\n  randomIndex(max) {\n    return { row: this.randomNum(0, max), col: this.randomNum(0, max) };\n  }\n\n  markGrid(sourceNode, direction) {\n    sourceNode.children[direction] = true;\n    let row = sourceNode.coords.row;\n    let col = sourceNode.coords.col;\n\n    if (direction === \"down\") {\n      this.render(this.ctx, row + 1, col, \"white\");\n      if (this.grid[row + 2][col] === null)\n        this.grid[row + 2][col] = new MazeNode(row + 2, col, this.ctx);\n      let destNode = this.grid[row + 2][col];\n      destNode.children.up = true;\n      this.render(this.ctx, destNode.coords.row, destNode.coords.col, \"white\");\n      this.grid[row + 1][col] = \"path\";\n    } else if (direction === \"up\") {\n      this.render(this.ctx, row - 1, col, \"white\");\n      if (this.grid[row - 2][col] === null)\n        this.grid[row - 2][col] = new MazeNode(row - 2, col, this.ctx);\n      let destNode = this.grid[row - 2][col];\n      destNode.children.down = true;\n      this.grid[row - 2][col] = destNode;\n      this.render(this.ctx, destNode.coords.row, destNode.coords.col, \"white\");\n      this.grid[row - 1][col] = \"path\";\n    } else if (direction === \"right\") {\n      this.render(this.ctx, row, col + 1, \"white\");\n      if (this.grid[row][col + 2] === null)\n        this.grid[row][col + 2] = new MazeNode(row, col + 2, this.ctx);\n      let destNode = this.grid[row][col + 2];\n      destNode.children.left = true;\n      this.grid[row][col + 2] = destNode;\n      this.render(this.ctx, destNode.coords.row, destNode.coords.col, \"white\");\n      this.grid[row][col + 1] = \"path\";\n    } else {\n      this.render(this.ctx, row, col - 1, \"white\");\n      if (this.grid[row][col - 2] === null)\n        this.grid[row][col - 2] = new MazeNode(row, col - 2, this.ctx);\n      let destNode = this.grid[row][col - 2];\n      destNode.children.right = true;\n      this.grid[row][col - 2] = destNode;\n      this.render(this.ctx, destNode.coords.row, destNode.coords.col, \"white\");\n      this.grid[row][col - 1] = \"path\";\n    }\n  }\n\n  render(ctx, row, col, color) {\n    ctx.fillStyle = color;\n    ctx.fillRect(col * 10 + 10, row * 10 + 10, 10, 10);\n  }\n\n  generateGrid(size) {\n    let path = new Array(size);\n    for (let row = 0; row < path.length; row++) {\n      path[row] = new Array(size);\n      for (let col = 0; col < path[row].length; col++) {\n        path[row][col] = null;\n      }\n    }\n\n    return path;\n  }\n\n  generateMaze(tree, ctx) {\n    let startIndex = this.randomIndex(this.size);\n    let endIndex = this.randomIndex(this.size);\n\n    while (startIndex === endIndex) {\n      endIndex = this.randomIndex(this.size);\n    }\n    tree.forEach((edge, index) => {\n      let direction = edge.direction;\n      let sourceRow = edge.source.coords.row * 2;\n      let sourceCol = edge.source.coords.col * 2;\n      let sourceNode = this.grid[sourceRow][sourceCol];\n\n      if (sourceNode === null) {\n        sourceNode = new MazeNode(sourceRow, sourceCol, this.ctx);\n        this.grid[sourceRow][sourceCol] = sourceNode;\n      }\n\n      setTimeout(() => {\n        this.render(\n          this.ctx,\n          sourceNode.coords.row,\n          sourceNode.coords.col,\n          \"white\"\n        );\n        this.markGrid(sourceNode, direction);\n      }, index * 10);\n    });\n\n    setTimeout(() => {\n      this.render(this.ctx, startIndex.row, startIndex.col, \"green\");\n      this.render(this.ctx, endIndex.row, endIndex.col, \"red\");\n      this.startNode = this.grid[startIndex.row][startIndex.col];\n      this.endNode = this.grid[endIndex.row][endIndex.col];\n\n      this.currentSolver = new Solvers(\n        this.ctx,\n        this.startNode,\n        this.endNode,\n        this.grid\n      );\n    }, tree.length * 10);\n  }\n}\n\nexport default MazePath;\n","class Node {\n  constructor(rowCoord, colCoord, ctx) {\n    this.coords = { row: rowCoord, col: colCoord };\n    this.ctx = ctx;\n  }\n}\n\nexport default Node;\n","import MazePath from \"./maze_path\";\nimport MazeNode from \"./maze_node\";\n\nclass Solvers {\n  constructor(ctx, startNode, endNode, grid) {\n    this.ctx = ctx;\n    this.startNode = startNode;\n    this.endNode = endNode;\n    this.grid = grid;\n    this.steps = 0;\n    this.depthFirstSolution = this.depthFirstSolution.bind(this);\n    this.breadthFirstSolution = this.breadthFirstSolution.bind(this);\n    this.setTimeouts = [];\n    this.setIntervals = [];\n\n    this.destroySolver = this.destroySolver.bind(this);\n    document\n      .getElementById(\"depth-first\")\n      .addEventListener(\"click\", this.depthFirstSolution);\n\n    document\n      .getElementById(\"breadth-first\")\n      .addEventListener(\"click\", this.breadthFirstSolution);\n\n    document\n      .getElementById(\"reset\")\n      .addEventListener(\"click\", this.destroySolver);\n  }\n\n  render(ctx, row, col, color) {\n    ctx.fillStyle = color;\n    ctx.fillRect(col * 10 + 10, row * 10 + 10, 10, 10);\n  }\n\n  destroySolver() {\n    let ctx = this.ctx;\n    for (let i = 0; i < this.setTimeouts.length; i++) {\n      let timeOut = this.setTimeouts[i];\n      clearTimeout(timeOut);\n    }\n\n    for (let j = 0; j < this.setIntervals.length; j++) {\n      let timeInterval = this.setIntervals[j];\n      clearInterval(timeInterval);\n      this.setIntervals = [];\n    }\n    for (let k = 0; k < this.grid.length; k++) {\n      let row = this.grid[k];\n      for (let l = 0; l < row.length; l++) {\n        let col = row[l];\n        if (col !== null && col !== this.startNode && col !== this.endNode) {\n          this.render(ctx, k, l, \"white\");\n        }\n      }\n    }\n    this.steps = 0;\n    console.log(this.setTimeouts, this.setIntervals);\n  }\n\n  depthFirstSolution() {\n    let visited = this.depthFirstSearch(this.startNode, this.endNode);\n    let ctx = this.ctx;\n\n    let timeOut = setTimeout(() => {\n      let j = 0;\n\n      let intervalId = setInterval(() => {\n        if (j === visited.length - 2) {\n          clearInterval(intervalId);\n        }\n        let node = visited[visited.length - j - 1];\n        let nextNode = visited[visited.length - j - 2];\n        let edgeRow = (node.coords.row + nextNode.coords.row) / 2;\n        let edgeCol = (node.coords.col + nextNode.coords.col) / 2;\n        if (j !== 0) {\n          this.render(ctx, edgeRow, edgeCol, \"blue\");\n          this.render(ctx, node.coords.row, node.coords.col, \"blue\");\n        } else if (j === 0) {\n          this.render(ctx, edgeRow, edgeCol, \"blue\");\n        }\n        j++;\n      }, 50);\n      this.setIntervals.push(intervalId);\n    }, this.steps * 10);\n\n    this.setTimeouts.push(timeOut);\n    console.log(this.setTimeouts, this.setIntervals);\n  }\n\n  depthFirstSearch(currNode, endNode, visited = []) {\n    this.steps++;\n    let ctx = this.ctx;\n    if (currNode === endNode) {\n      visited.unshift(currNode);\n\n      return visited;\n    }\n    if (visited.includes(currNode)) return;\n    for (let dir in currNode.children) {\n      if (currNode.children[dir] !== null) {\n        let coords;\n        coords = currNode[dir]();\n        let nextNode = this.grid[coords.row][coords.col];\n        let timeOut = setTimeout(() => {\n          let edgeRow = (currNode.coords.row + nextNode.coords.row) / 2;\n          let edgeCol = (currNode.coords.col + nextNode.coords.col) / 2;\n          this.render(ctx, edgeRow, edgeCol, \"grey\");\n          if (currNode !== this.startNode && currNode !== this.endNode) {\n            this.render(ctx, currNode.coords.row, currNode.coords.col, \"grey\");\n          }\n        }, this.steps * 10);\n        this.setTimeouts.push(timeOut);\n        let rest = this.depthFirstSearch(nextNode, endNode, [\n          currNode,\n          ...visited\n        ]);\n        if (rest) {\n          return rest;\n        }\n      }\n    }\n  }\n\n  breadthFirstBackTrace(parent, start, end) {\n    let path = [[end.coords.row, end.coords.col]];\n\n    while (path[path.length - 1] !== \"root\") {\n      let prevCoords = path[path.length - 1];\n      let prevRow = prevCoords[0];\n      let prevCol = prevCoords[1];\n\n      let nextNode = parent[[prevRow, prevCol]];\n      if (nextNode !== \"root\") {\n        let nextNodeRow = nextNode.coords.row;\n        let nextNodeCol = nextNode.coords.col;\n        path.push([nextNodeRow, nextNodeCol]);\n      } else {\n        path.push(\"root\");\n      }\n    }\n\n    return path;\n  }\n\n  breadthFirstSearch(startNode, endNode) {\n    let ctx = this.ctx;\n    const set = new Set();\n    let parent = {};\n    parent[[startNode.coords.row, startNode.coords.col]] = \"root\";\n    let queue = [];\n    queue.push({ node: startNode });\n\n    while (queue.length) {\n      this.steps++;\n      let currObject = queue.shift();\n      let currNode = currObject.node;\n      let prevNode = currObject.prevNode || null;\n      set.add(currNode);\n      if (currNode === endNode) {\n        let timeOut = setTimeout(() => {\n          let edgeRow = (currNode.coords.row + prevNode.coords.row) / 2;\n          let edgeCol = (currNode.coords.col + prevNode.coords.col) / 2;\n          this.render(ctx, edgeRow, edgeCol, \"grey\");\n        }, this.steps * 10);\n        this.setTimeouts.push(timeOut);\n\n        return this.breadthFirstBackTrace(parent, startNode, endNode);\n      }\n\n      let timeOutTwo = setTimeout(() => {\n        if (currNode !== startNode && currNode !== endNode) {\n          let edgeRow = (currNode.coords.row + prevNode.coords.row) / 2;\n          let edgeCol = (currNode.coords.col + prevNode.coords.col) / 2;\n          this.render(ctx, edgeRow, edgeCol, \"grey\");\n          this.render(ctx, currNode.coords.row, currNode.coords.col, \"grey\");\n        }\n      }, this.steps * 10);\n      this.setTimeouts.push(timeOutTwo);\n      let currChildren = currNode.children;\n      for (let dir in currChildren) {\n        if (currChildren[dir] !== null) {\n          let coords;\n          coords = currNode[dir]();\n          let nextNode = this.grid[coords.row][coords.col];\n\n          if (set.has(nextNode)) {\n            continue;\n          }\n          let coordinates = [nextNode.coords.row, nextNode.coords.col];\n          parent[coordinates] = currNode;\n          queue.push({ node: nextNode, prevNode: currNode });\n        }\n      }\n    }\n  }\n\n  breadthFirstSolution() {\n    let visited = this.breadthFirstSearch(this.startNode, this.endNode);\n    let ctx = this.ctx;\n\n    let timeOut = setTimeout(() => {\n      let j = 0;\n\n      let intervalId = setInterval(() => {\n        if (j === visited.length - 3) {\n          clearInterval(intervalId);\n        }\n        let node = visited[visited.length - j - 2];\n        let nextNode = visited[visited.length - j - 3];\n        let edgeRow = (node[0] + nextNode[0]) / 2;\n        let edgeCol = (node[1] + nextNode[1]) / 2;\n        if (j !== 0) {\n          this.render(ctx, edgeRow, edgeCol, \"blue\");\n          this.render(ctx, node[0], node[1], \"blue\");\n        } else if (j === 0) {\n          this.render(ctx, edgeRow, edgeCol, \"blue\");\n        }\n        j++;\n      }, 50);\n      this.setIntervals.push(intervalId);\n    }, this.steps * 10);\n    this.setTimeouts.push(timeOut);\n  }\n}\n\nexport default Solvers;\n"],"sourceRoot":""}